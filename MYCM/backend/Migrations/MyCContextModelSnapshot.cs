// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.persistence.ef;

namespace backend.Migrations
{
    [DbContext(typeof(MyCContext))]
    partial class MyCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("core.domain.CatalogueCollection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("customizedProductCollectionId");

                    b.HasKey("Id");

                    b.HasIndex("customizedProductCollectionId");

                    b.ToTable("CatalogueCollection");
                });

            modelBuilder.Entity("core.domain.CatalogueCollectionProduct", b =>
                {
                    b.Property<long>("catalogueCollectionId");

                    b.Property<long>("customizedProductId");

                    b.HasKey("catalogueCollectionId", "customizedProductId");

                    b.HasIndex("customizedProductId");

                    b.ToTable("CatalogueCollectionProduct");
                });

            modelBuilder.Entity("core.domain.CollectionProduct", b =>
                {
                    b.Property<long>("customizedProductId");

                    b.Property<long>("customizedProductCollectionId");

                    b.HasKey("customizedProductId", "customizedProductCollectionId");

                    b.HasIndex("customizedProductCollectionId");

                    b.ToTable("CollectionProduct");
                });

            modelBuilder.Entity("core.domain.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Alpha");

                    b.Property<byte>("Blue");

                    b.Property<byte>("Green");

                    b.Property<long?>("MaterialId");

                    b.Property<string>("Name");

                    b.Property<byte>("Red");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("core.domain.CommercialCatalogue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("activated");

                    b.Property<string>("designation");

                    b.Property<string>("reference");

                    b.HasKey("Id");

                    b.ToTable("CommercialCatalogue");
                });

            modelBuilder.Entity("core.domain.CommercialCatalogueCatalogueCollection", b =>
                {
                    b.Property<long>("commercialCatalogueId");

                    b.Property<long>("catalogueCollectionId");

                    b.HasKey("commercialCatalogueId", "catalogueCollectionId");

                    b.HasIndex("catalogueCollectionId")
                        .IsUnique();

                    b.ToTable("CommercialCatalogueCatalogueCollection");
                });

            modelBuilder.Entity("core.domain.Component", b =>
                {
                    b.Property<long>("fatherProductId");

                    b.Property<long>("complementedProductId");

                    b.Property<bool>("mandatory");

                    b.HasKey("fatherProductId", "complementedProductId");

                    b.HasIndex("complementedProductId");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("core.domain.CustomizedMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("colorId");

                    b.Property<long?>("finishId");

                    b.Property<long?>("materialId");

                    b.HasKey("Id");

                    b.HasIndex("colorId");

                    b.HasIndex("finishId");

                    b.HasIndex("materialId");

                    b.ToTable("CustomizedMaterial");
                });

            modelBuilder.Entity("core.domain.CustomizedProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("activated");

                    b.Property<long?>("customizedMaterialId");

                    b.Property<string>("designation");

                    b.Property<long?>("insertedInSlotId");

                    b.Property<long?>("productId");

                    b.Property<string>("reference");

                    b.HasKey("Id");

                    b.HasIndex("customizedMaterialId");

                    b.HasIndex("insertedInSlotId");

                    b.HasIndex("productId");

                    b.ToTable("CustomizedProduct");
                });

            modelBuilder.Entity("core.domain.CustomizedProductCollection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("activated");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.ToTable("CustomizedProductCollection");
                });

            modelBuilder.Entity("core.domain.Dimension", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Dimension");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Dimension");
                });

            modelBuilder.Entity("core.domain.DoubleValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DiscreteDimensionIntervalId");

                    b.Property<double>("value");

                    b.HasKey("Id");

                    b.HasIndex("DiscreteDimensionIntervalId");

                    b.ToTable("DoubleValue");
                });

            modelBuilder.Entity("core.domain.Finish", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("MaterialId");

                    b.Property<string>("description");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("Finish");
                });

            modelBuilder.Entity("core.domain.FinishPriceTableEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("activated");

                    b.Property<string>("eId");

                    b.Property<long?>("entityId");

                    b.Property<string>("materialEID");

                    b.Property<long?>("timePeriodId");

                    b.HasKey("Id");

                    b.HasIndex("entityId");

                    b.HasIndex("timePeriodId");

                    b.ToTable("FinishPriceTable");
                });

            modelBuilder.Entity("core.domain.Input", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("RestrictionId");

                    b.Property<string>("name");

                    b.Property<string>("value");

                    b.HasKey("Id");

                    b.HasIndex("RestrictionId");

                    b.ToTable("Input");
                });

            modelBuilder.Entity("core.domain.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("activated");

                    b.Property<string>("designation");

                    b.Property<string>("reference");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("core.domain.MaterialPriceTableEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("activated");

                    b.Property<string>("eId");

                    b.Property<long?>("entityId");

                    b.Property<long?>("timePeriodId");

                    b.HasKey("Id");

                    b.HasIndex("entityId");

                    b.HasIndex("timePeriodId");

                    b.ToTable("MaterialPriceTable");
                });

            modelBuilder.Entity("core.domain.Measurement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("depthId");

                    b.Property<long?>("heightId");

                    b.Property<long?>("widthId");

                    b.HasKey("Id");

                    b.HasIndex("depthId");

                    b.HasIndex("heightId");

                    b.HasIndex("widthId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("core.domain.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("activated");

                    b.Property<string>("designation");

                    b.Property<long?>("productCategoryId");

                    b.Property<string>("reference");

                    b.Property<bool>("supportsSlots");

                    b.HasKey("Id");

                    b.HasIndex("productCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("core.domain.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("activated");

                    b.Property<string>("name");

                    b.Property<long?>("parentId");

                    b.HasKey("Id");

                    b.HasIndex("parentId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("core.domain.ProductMaterial", b =>
                {
                    b.Property<long>("productId");

                    b.Property<long>("materialId");

                    b.HasKey("productId", "materialId");

                    b.HasIndex("materialId");

                    b.ToTable("ProductMaterial");
                });

            modelBuilder.Entity("core.domain.ProductMeasurement", b =>
                {
                    b.Property<long>("productId");

                    b.Property<long>("measurementId");

                    b.HasKey("productId", "measurementId");

                    b.HasIndex("measurementId");

                    b.ToTable("ProductMeasurement");
                });

            modelBuilder.Entity("core.domain.Restriction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ComponentcomplementedProductId");

                    b.Property<long?>("ComponentfatherProductId");

                    b.Property<long?>("MeasurementId");

                    b.Property<long?>("ProductMaterialmaterialId");

                    b.Property<long?>("ProductMaterialproductId");

                    b.Property<int>("algorithm");

                    b.Property<string>("description");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementId");

                    b.HasIndex("ComponentfatherProductId", "ComponentcomplementedProductId");

                    b.HasIndex("ProductMaterialproductId", "ProductMaterialmaterialId");

                    b.ToTable("Restriction");
                });

            modelBuilder.Entity("core.domain.Slot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CustomizedProductId");

                    b.HasKey("Id");

                    b.HasIndex("CustomizedProductId");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("core.domain.TimePeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("endingDate");

                    b.Property<DateTime>("startingDate");

                    b.HasKey("Id");

                    b.ToTable("TimePeriod");
                });

            modelBuilder.Entity("core.domain.ContinuousDimensionInterval", b =>
                {
                    b.HasBaseType("core.domain.Dimension");

                    b.Property<double>("increment");

                    b.Property<double>("maxValue");

                    b.Property<double>("minValue");

                    b.ToTable("ContinuousDimensionInterval");

                    b.HasDiscriminator().HasValue("ContinuousDimensionInterval");
                });

            modelBuilder.Entity("core.domain.DiscreteDimensionInterval", b =>
                {
                    b.HasBaseType("core.domain.Dimension");


                    b.ToTable("DiscreteDimensionInterval");

                    b.HasDiscriminator().HasValue("DiscreteDimensionInterval");
                });

            modelBuilder.Entity("core.domain.SingleValueDimension", b =>
                {
                    b.HasBaseType("core.domain.Dimension");

                    b.Property<double>("value");

                    b.ToTable("SingleValueDimension");

                    b.HasDiscriminator().HasValue("SingleValueDimension");
                });

            modelBuilder.Entity("core.domain.CatalogueCollection", b =>
                {
                    b.HasOne("core.domain.CustomizedProductCollection", "customizedProductCollection")
                        .WithMany()
                        .HasForeignKey("customizedProductCollectionId");
                });

            modelBuilder.Entity("core.domain.CatalogueCollectionProduct", b =>
                {
                    b.HasOne("core.domain.CatalogueCollection", "catalogueCollection")
                        .WithMany("catalogueCollectionProducts")
                        .HasForeignKey("catalogueCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.domain.CustomizedProduct", "customizedProduct")
                        .WithMany()
                        .HasForeignKey("customizedProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("core.domain.CollectionProduct", b =>
                {
                    b.HasOne("core.domain.CustomizedProductCollection", "customizedProductCollection")
                        .WithMany("collectionProducts")
                        .HasForeignKey("customizedProductCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.domain.CustomizedProduct", "customizedProduct")
                        .WithMany()
                        .HasForeignKey("customizedProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("core.domain.Color", b =>
                {
                    b.HasOne("core.domain.Material")
                        .WithMany("Colors")
                        .HasForeignKey("MaterialId");
                });

            modelBuilder.Entity("core.domain.CommercialCatalogueCatalogueCollection", b =>
                {
                    b.HasOne("core.domain.CatalogueCollection", "catalogueCollection")
                        .WithOne()
                        .HasForeignKey("core.domain.CommercialCatalogueCatalogueCollection", "catalogueCollectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.domain.CommercialCatalogue", "commercialCatalogue")
                        .WithMany("catalogueCollectionList")
                        .HasForeignKey("commercialCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("core.domain.Component", b =>
                {
                    b.HasOne("core.domain.Product", "complementedProduct")
                        .WithMany()
                        .HasForeignKey("complementedProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.domain.Product", "fatherProduct")
                        .WithMany("complementedProducts")
                        .HasForeignKey("fatherProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("core.domain.CustomizedMaterial", b =>
                {
                    b.HasOne("core.domain.Color", "color")
                        .WithMany()
                        .HasForeignKey("colorId");

                    b.HasOne("core.domain.Finish", "finish")
                        .WithMany()
                        .HasForeignKey("finishId");

                    b.HasOne("core.domain.Material", "material")
                        .WithMany()
                        .HasForeignKey("materialId");
                });

            modelBuilder.Entity("core.domain.CustomizedProduct", b =>
                {
                    b.HasOne("core.domain.CustomizedMaterial", "customizedMaterial")
                        .WithMany()
                        .HasForeignKey("customizedMaterialId");

                    b.HasOne("core.domain.Slot", "insertedInSlot")
                        .WithMany("customizedProducts")
                        .HasForeignKey("insertedInSlotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.domain.Product", "product")
                        .WithMany()
                        .HasForeignKey("productId");

                    b.OwnsOne("core.domain.CustomizedDimensions", "customizedDimensions", b1 =>
                        {
                            b1.Property<long>("Id");

                            b1.Property<double>("depth");

                            b1.Property<double>("height");

                            b1.Property<double>("width");

                            b1.ToTable("CustomizedProduct");

                            b1.HasOne("core.domain.CustomizedProduct")
                                .WithOne("customizedDimensions")
                                .HasForeignKey("core.domain.CustomizedDimensions", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("core.domain.DoubleValue", b =>
                {
                    b.HasOne("core.domain.DiscreteDimensionInterval")
                        .WithMany("values")
                        .HasForeignKey("DiscreteDimensionIntervalId");
                });

            modelBuilder.Entity("core.domain.Finish", b =>
                {
                    b.HasOne("core.domain.Material")
                        .WithMany("Finishes")
                        .HasForeignKey("MaterialId");
                });

            modelBuilder.Entity("core.domain.FinishPriceTableEntry", b =>
                {
                    b.HasOne("core.domain.Finish", "entity")
                        .WithMany()
                        .HasForeignKey("entityId");

                    b.HasOne("core.domain.TimePeriod", "timePeriod")
                        .WithMany()
                        .HasForeignKey("timePeriodId");

                    b.OwnsOne("core.domain.Price", "price", b1 =>
                        {
                            b1.Property<long>("FinishPriceTableEntryId");

                            b1.Property<double>("value");

                            b1.ToTable("FinishPriceTable");

                            b1.HasOne("core.domain.FinishPriceTableEntry")
                                .WithOne("price")
                                .HasForeignKey("core.domain.Price", "FinishPriceTableEntryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("core.domain.Input", b =>
                {
                    b.HasOne("core.domain.Restriction")
                        .WithMany("inputs")
                        .HasForeignKey("RestrictionId");
                });

            modelBuilder.Entity("core.domain.MaterialPriceTableEntry", b =>
                {
                    b.HasOne("core.domain.Material", "entity")
                        .WithMany()
                        .HasForeignKey("entityId");

                    b.HasOne("core.domain.TimePeriod", "timePeriod")
                        .WithMany()
                        .HasForeignKey("timePeriodId");

                    b.OwnsOne("core.domain.Price", "price", b1 =>
                        {
                            b1.Property<long>("MaterialPriceTableEntryId");

                            b1.Property<double>("value");

                            b1.ToTable("MaterialPriceTable");

                            b1.HasOne("core.domain.MaterialPriceTableEntry")
                                .WithOne("price")
                                .HasForeignKey("core.domain.Price", "MaterialPriceTableEntryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("core.domain.Measurement", b =>
                {
                    b.HasOne("core.domain.Dimension", "depth")
                        .WithMany()
                        .HasForeignKey("depthId");

                    b.HasOne("core.domain.Dimension", "height")
                        .WithMany()
                        .HasForeignKey("heightId");

                    b.HasOne("core.domain.Dimension", "width")
                        .WithMany()
                        .HasForeignKey("widthId");
                });

            modelBuilder.Entity("core.domain.Product", b =>
                {
                    b.HasOne("core.domain.ProductCategory", "productCategory")
                        .WithMany()
                        .HasForeignKey("productCategoryId");

                    b.OwnsOne("core.domain.CustomizedDimensions", "maxSlotSize", b1 =>
                        {
                            b1.Property<long>("Id");

                            b1.Property<double>("depth");

                            b1.Property<double>("height");

                            b1.Property<double>("width");

                            b1.ToTable("Product");

                            b1.HasOne("core.domain.Product")
                                .WithOne("maxSlotSize")
                                .HasForeignKey("core.domain.CustomizedDimensions", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("core.domain.CustomizedDimensions", "minSlotSize", b1 =>
                        {
                            b1.Property<long>("Id");

                            b1.Property<double>("depth");

                            b1.Property<double>("height");

                            b1.Property<double>("width");

                            b1.ToTable("Product");

                            b1.HasOne("core.domain.Product")
                                .WithOne("minSlotSize")
                                .HasForeignKey("core.domain.CustomizedDimensions", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("core.domain.CustomizedDimensions", "recommendedSlotSize", b1 =>
                        {
                            b1.Property<long>("Id");

                            b1.Property<double>("depth");

                            b1.Property<double>("height");

                            b1.Property<double>("width");

                            b1.ToTable("Product");

                            b1.HasOne("core.domain.Product")
                                .WithOne("recommendedSlotSize")
                                .HasForeignKey("core.domain.CustomizedDimensions", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("core.domain.ProductCategory", b =>
                {
                    b.HasOne("core.domain.ProductCategory", "parent")
                        .WithMany()
                        .HasForeignKey("parentId");
                });

            modelBuilder.Entity("core.domain.ProductMaterial", b =>
                {
                    b.HasOne("core.domain.Material", "material")
                        .WithMany()
                        .HasForeignKey("materialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.domain.Product", "product")
                        .WithMany("productMaterials")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("core.domain.ProductMeasurement", b =>
                {
                    b.HasOne("core.domain.Measurement", "measurement")
                        .WithMany()
                        .HasForeignKey("measurementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("core.domain.Product", "product")
                        .WithMany("measurements")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("core.domain.Restriction", b =>
                {
                    b.HasOne("core.domain.Measurement")
                        .WithMany("restrictions")
                        .HasForeignKey("MeasurementId");

                    b.HasOne("core.domain.Component")
                        .WithMany("restrictions")
                        .HasForeignKey("ComponentfatherProductId", "ComponentcomplementedProductId");

                    b.HasOne("core.domain.ProductMaterial")
                        .WithMany("restrictions")
                        .HasForeignKey("ProductMaterialproductId", "ProductMaterialmaterialId");
                });

            modelBuilder.Entity("core.domain.Slot", b =>
                {
                    b.HasOne("core.domain.CustomizedProduct")
                        .WithMany("slots")
                        .HasForeignKey("CustomizedProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("core.domain.CustomizedDimensions", "slotDimensions", b1 =>
                        {
                            b1.Property<long>("Id");

                            b1.Property<double>("depth");

                            b1.Property<double>("height");

                            b1.Property<double>("width");

                            b1.ToTable("Slot");

                            b1.HasOne("core.domain.Slot")
                                .WithOne("slotDimensions")
                                .HasForeignKey("core.domain.CustomizedDimensions", "Id")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
